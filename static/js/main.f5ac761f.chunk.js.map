{"version":3,"sources":["components/slider/sliderAvatar/sliderAvatar.jsx","components/slider/sliderNextButton/sliderNextButton.jsx","components/slider/sliderPreviousButton/sliderPreviousButton.jsx","components/slider/slider.jsx","App.js","serviceWorker.js","index.js"],"names":["sliderAvatar","props","react_default","a","createElement","className","style","backgroundImage","concat","avatar","NextButton","onClick","handler","PreviousButton","Slider","result","nicks","_useState","useState","_useState2","Object","slicedToArray","count","setCount","_useState3","_useState4","setAvatar","_useState5","_useState6","isLoading","setIsLoading","useEffect","fetch","then","response","json","console","log","avatar_url","slider_sliderAvatar_sliderAvatar","sliderPreviousButton","length","sliderNextButton","App","slider_slider","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OASeA,MANf,SAAsBC,GACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,MAAQ,CAACC,gBAAe,OAAAC,OAASP,EAAMQ,OAAf,SCMrCC,MATf,SAAoBT,GAElB,OACEC,EAAAC,EAAAC,cAAA,UAAQO,QAASV,EAAMW,SAAvB,cCMWC,MATf,SAAwBZ,GAEtB,OACEC,EAAAC,EAAAC,cAAA,UAAQO,QAASV,EAAMW,SAAvB,wBCyDWE,MAxDf,WAEE,IAgCIC,EAhCEC,EAAQ,CAAC,UAAW,UAAW,YAAa,WAAY,gBAF9CC,EAGUC,mBAAS,GAHnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGTK,EAHSH,EAAA,GAGFI,EAHEJ,EAAA,GAAAK,EAIYN,mBAAS,IAJrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAITf,EAJSgB,EAAA,GAIDC,EAJCD,EAAA,GAAAE,EAKkBT,oBAAS,GAL3BU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAKTE,EALSD,EAAA,GAKEE,EALFF,EAAA,GA6ChB,OAtCAG,oBAAU,WACRD,GAAa,GACbE,MAAK,gCAAAxB,OAAiCQ,EAAMM,KAC3CW,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACJE,QAAQC,IAAIH,GACZR,EAAUQ,EAASI,YACnBR,GAAa,MAEd,CAACR,IAqBFP,EADEc,EAEF3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAW,kBAAd,eAGOH,EAAAC,EAAAC,cAACmC,EAAD,CAAc9B,OAAQA,IAI/BP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZU,EACDb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACoC,EAAD,CAAgB5B,QAvBA,WAElBW,EADY,IAAVD,EACON,EAAMyB,OAAO,EAEbnB,EAAQ,MAoBfpB,EAAAC,EAAAC,cAACsC,EAAD,CAAY9B,QAhCA,WAEdW,EADED,IAAUN,EAAMyB,OAAS,EAClB,EAEAnB,EAAQ,eCjBRqB,MAPf,WAEE,OACEzC,EAAAC,EAAAC,cAACwC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.f5ac761f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './sliderAvatar.scss'\r\n\r\nfunction sliderAvatar(props) {\r\n  return (\r\n    <div className=\"avatar\" style ={{backgroundImage: `url(${props.avatar})`}}></div>    \r\n    );\r\n}\r\n\r\nexport default sliderAvatar;\r\n","import React from 'react';\r\n\r\nfunction NextButton(props) {\r\n\r\n  return (\r\n    <button onClick={props.handler}>\r\n      Next &raquo; \r\n    </button>\r\n    );\r\n}\r\n\r\nexport default NextButton;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nfunction PreviousButton(props) {\r\n\r\n  return (\r\n    <button onClick={props.handler}>\r\n      &laquo; Previous    \r\n    </button>\r\n    );\r\n}\r\n\r\nexport default PreviousButton;\r\n\r\n\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport SliderAvatar from './sliderAvatar/sliderAvatar';\r\nimport NextButton from './sliderNextButton/sliderNextButton';\r\nimport PreviousButton from './sliderPreviousButton/sliderPreviousButton';\r\nimport './slider.scss';\r\n\r\nfunction Slider() {\r\n\r\n  const nicks = ['gaearon', 'acdlite', 'yyx990803', 'unclebob', 'martinfowler'];\r\n  const [count, setCount] = useState(0);\r\n  const [avatar, setAvatar] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetch(`https://api.github.com/users/${nicks[count]}`)\r\n    .then(response => response.json())\r\n    .then(response =>{\r\n      console.log(response);\r\n      setAvatar(response.avatar_url)\r\n      setIsLoading(false);\r\n    })\r\n  }, [count]);\r\n\r\n  let NextHandler = () => {\r\n    if (count === nicks.length - 1) {\r\n      setCount(0);\r\n    } else {\r\n      setCount(count + 1)\r\n    };\r\n  }\r\n\r\n  let PreviousHandler = () => {\r\n    if (count === 0) {\r\n      setCount(nicks.length-1);\r\n    } else {\r\n      setCount(count - 1)\r\n    };\r\n  };\r\n\r\n  let result;\r\n  \r\n  if (isLoading) {\r\n    result = \r\n    <div className=\"avatar\">\r\n      <p className =\"avatar-loading\">Loading...</p>  \r\n    </div>\r\n  } else {\r\n    result = <SliderAvatar avatar={avatar}/> \r\n  }\r\n\r\n  return (\r\n    <div className=\"slider\">\r\n      {result}\r\n      <div className=\"buttons\">\r\n        <PreviousButton handler = {PreviousHandler}/>\r\n        <NextButton handler={NextHandler}/>\r\n      </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Slider;\r\n","import React from 'react';\nimport Slider from './components/slider/slider'\nimport './App.scss'\n\nfunction App() {\n\n  return (\n    <Slider/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}